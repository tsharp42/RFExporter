@page "/"
@using CommunityToolkit.Maui.Alerts;
@using CommunityToolkit.Maui.Storage;
@using RFExporter.Data;
@using System.Text;

@inject ScanningService scanningService;

<nav class="navbar navbar-dark bg-dark mb-2">
    <div class="container-fluid justify-content-start">

        <div class="d-flex">
            @if(scanningService.Status == ScanningService.ScanningStatus.Connecting)
            {
                <button class="btn btn-outline-success me-2 mb-2" type="button">Connecting...</button>
            } 
            @if(
            scanningService.Status == ScanningService.ScanningStatus.Connected ||
            scanningService.Status == ScanningService.ScanningStatus.ConnectedAndReady || 
            scanningService.Status == ScanningService.ScanningStatus.ScanComplete)
            {
                <button @onclick="scanningService.Disconnect" class="btn btn-outline-danger me-2 mb-2" type="button">Disconnect</button>
            }
            @if(scanningService.Status == ScanningService.ScanningStatus.Idle){
                <button @onclick="Connect" class="btn btn-outline-success me-2 mb-2" type="button">Connect</button>
            }
            

            @if (scanningService.Status == ScanningService.ScanningStatus.ConnectedAndReady || scanningService.Status == ScanningService.ScanningStatus.ScanComplete)
            {
                <button @onclick="StartScan" class="btn btn-success me-2 mb-2" type="button">Start Scan</button>
            }
            @if(scanningService.Status == ScanningService.ScanningStatus.Scanning)
            {
                <button @onclick="scanningService.Stop" class="btn btn-danger me-2 mb-2" type="button">Stop Scan</button>
            }

 
            @if (scanningService.Status == ScanningService.ScanningStatus.ScanComplete)
            {
                <button @onclick="SaveFile" class="btn btn-outline-info me-2 mb-2" type="button">SAVE</button>
            }
        </div>


        @if(
        scanningService.Status == ScanningService.ScanningStatus.Idle ||
        scanningService.Status == ScanningService.ScanningStatus.Connected ||
        scanningService.Status == ScanningService.ScanningStatus.ConnectedAndReady ||
        scanningService.Status == ScanningService.ScanningStatus.ScanComplete)
        {
            <div class="d-flex" style="width: 100%">
                <div class="input-group me-2" style="flex-basis:20%">
                    <span class="input-group-text">Port</span>
                    <select @bind="PortName" class="form-select" aria-label="Serial Port Selection">
                        @foreach(var port in AvailablePorts)
                        {
                            <option value="@port">@port</option>
                        }
                    </select>
                </div>

                <div class="input-group me-2 " style="flex-basis:20%">
                    <span class="input-group-text">Start</span>
                    <input @bind="StartFrequency" type="text" class="form-control" placeholder="Start Frequency" aria-label="Start Frequency" aria-describedby="basic-addon1">
                    <span class="input-group-text" id="basic-addon1">MHz</span>
                </div>

                <div class="input-group me-2" style="flex-basis:20%">
                    <span class="input-group-text">End</span>
                    <input @bind="EndFrequency" type="text" class="form-control" placeholder="End Frequency" aria-label="End Frequency" aria-describedby="basic-addon1">
                    <span class="input-group-text" id="basic-addon1">MHz</span>
                </div>

                <div class="input-group me-2" style="flex-basis:20%">
                    <span class="input-group-text">Width</span>
                    <input @bind="Width" type="text" class="form-control" placeholder="Width" aria-label="Width" aria-describedby="basic-addon1" >
                    <span class="input-group-text" id="basic-addon1">MHz</span>
                </div>

                <div class="input-group" style="flex-basis:20%">
                    <span class="input-group-text">Samples</span>
                    <input @bind="Samples" type="text" class="form-control" placeholder="Width" aria-label="Width" aria-describedby="basic-addon1">
                </div>   
            </div>
        }
    
      </div>
</nav>

 <main role="main">
    <div class="container-fluid">

        @if(
            scanningService.Status == ScanningService.ScanningStatus.Scanning ||
            scanningService.Status == ScanningService.ScanningStatus.ScanComplete)
        {
            <div class="row mb-2">
                <div class="col">
                    <div class="progress" style="height: 32px;">
                        <div class="progress-bar" role="progressbar" style="width: @(((float)scanningService.ScannedSamples / (float)scanningService.TotalSamples)*100)%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                            @scanningService.ScannedSamples/@scanningService.TotalSamples
                        </div>
                    </div>
                </div>
            </div>

        }

        <div class="row mb-2">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        Log
                    </div>
                    <div class="card-body">
                        <pre class="log-output">

                            @for(int l = scanningService.Log.Count-1; l > 0; l--)
                            {
@scanningService.Log[l] @Environment.NewLine                                
                            }
                        </pre>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="card">
                    <div class="card-header">
                        Blocks [@scanningService.ScannedBlocks/@scanningService.TotalBlocks]
                    </div>
                    <!-- <div class="card-body"> -->
                        <table class="table table-bordered table-sm card-body">
                            <thead>
                                <tr>
                                    <th>Start</th>
                                    <th>End</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var block in scanningService.ScanBlocks)
                                {
                                    <tr>
                                        <td>@block.StartFrequency</td>
                                        <td>@block.EndFrequency</td>
                                        <td>
                                            @if(block.Status == ScanBlock.BlockStatus.Unscanned)
                                            {
                                                <span class="badge bg-danger">Unscanned [@block.AmplitudeData.Count]</span>
                                            }
                                            @if (block.Status == ScanBlock.BlockStatus.InProgress)
                                            {
                                                <span class="badge bg-info">In Progress [@block.AmplitudeData.Count]</span>
                                            }
                                            @if (block.Status == ScanBlock.BlockStatus.Scanned)
                                            {
                                                <span class="badge bg-success">Scanned [@block.AmplitudeData.Count]</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    <!-- </div> -->
                </div>
            </div>

            <div class="col">
                <div class="card">
                    <div class="card-header">
                        Device
                    </div>
                    <div class="card-body">
                        <table class="table table-bordered">
                            <tbody>
                                <tr>
                                    <th>Model</th>
                                    <td>@scanningService.DeviceModel</td>
                                </tr>
                                <tr>
                                    <th>Firmware</th>
                                    <td>@scanningService.DeviceFirmware</td>
                                </tr>
                                <tr>
                                    <th>Serial</th>
                                    <td>@scanningService.DeviceSerialNumber</td>
                                </tr>
                                <tr>
                                    <th>Status</th>
                                    <td>@scanningService.Status</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>


        </div>

    </div>
</main>



@code {
    private string[] AvailablePorts;

    private double StartFrequency { get; set; } = 600.000;
    private double EndFrequency { get; set; } = 900.000;
    private double Width { get; set; } = 2.000;
    private int Samples { get; set; } = 10;

    private string PortName { get; set; } = "---";

    protected override async Task OnInitializedAsync()
    {
        AvailablePorts = await scanningService.GetAvailablePorts();

        if(AvailablePorts.Length >0)
        {
            PortName = AvailablePorts[0];
        }
    }

    async Task SaveFile()
    {
        using var stream = new MemoryStream(Encoding.Default.GetBytes(scanningService.GetCSVData()));
        var fileSaverResult = await FileSaver.Default.SaveAsync("scan-data.csv", stream, CancellationToken.None);
        if (fileSaverResult.IsSuccessful)
        {
            await Toast.Make($"The file was saved successfully to location: {fileSaverResult.FilePath}").Show();
        }
        else
        {
            await Toast.Make($"The file was not saved successfully with error: {fileSaverResult.Exception.Message}").Show();
        }
    }

    async Task StartScan()
    {

        await scanningService.Start(StartFrequency, EndFrequency, Width, Samples);
    }

    async Task Connect()
    {
        await scanningService.Connect(PortName);
    }

    // Timer to refresh data on this page every second
    System.Threading.Timer? timer;
    protected override void OnInitialized()
    {
        timer = new System.Threading.Timer(async _ =>  // async void
        {

            InvokeAsync(() => StateHasChanged());

        }, null, 0, 100);
    }

}
